<?xml version="1.0" encoding="UTF-8"?>
<project name="IzPack" default="all" basedir="..">
    <!--
  $Id$

  build.xml first written by Pierre Dittgen (pierre.dittgen@criltelecom.com)
  This file is intended to be used with ant (http://jakarta.apache.org/ant),
  a java/xml makefile utility.

  Mini-HowTo:

  To compile and package the compiler.jar jar file, type:
    ant build.compiler

  To compile and package the installer.jar jar file, type:
    ant build.installer

  To compile and package the uninstaller.jar jar file, type:
    ant build.uninstaller

  To compile the panels and put them in the bin/panels directory, type:
    ant build.panels

    To compile and package the frontend.jar jar file, type:
        ant build.frontend

  To make all, type:
    ant all
  or
    ant
  (this is the default target)

    To compile and create IzPack distribution package type:
    ant dist

    To delete the classes directory after packaging, just type:
    ant clean
  -->

    <!-- Compiler to use put your own here (jikes, modern, gcj, ...) -->
    <!--<property name="build.compiler" value="jikes" />-->

    <!-- Define directories -->
    <property name="cwd" value="${basedir}"/>

    <property file="izPackCustomActions/src/ant.properties"/>
    <property name="ver" value="4.3"/>
    <property name="rel" value="5"/>
    <property name="build.number" value="${ver}.${rel}"/>

    <property name="src.dir" value="${basedir}/lib"/>
    <property name="img.dir" value="${basedir}/src/img"/>
    <property name="bin.dir" value="${basedir}/bin"/>
    <property name="doc.dir" value="${basedir}/doc"/>

    <property name="build.subdir" value="_build"/>
    <property name="build.dir" value="${basedir}/${build.subdir}"/>

    <property name="dist.subdir" value="_dist"/>
    <property name="dist.dir" value="${basedir}/${dist.subdir}"/>
    <property name="dist-files.dir" value="${basedir}/src/dist-files"/>

    <!-- Define Main-Classes -->
    <property name="compiler.class" value="com.izforge.izpack.compiler.Compiler"/>
    <property name="installer.class" value="com.izforge.izpack.installer.Installer"/>
    <property name="uninstaller.class" value="com.izforge.izpack.uninstaller.Uninstaller"/>

    <!-- Define file paths -->
    <property name="compiler.jar" value="${basedir}/lib/compiler.jar"/>
    <property name="standalone-compiler.jar" value="${basedir}/lib/standalone-compiler.jar"/>
    <property name="installer.jar" value="${basedir}/lib/installer.jar"/>
    <property name="uninstaller.jar" value="${basedir}/lib/uninstaller.jar"/>
    <property name="izevent.jar" value="${basedir}/lib/izevent.jar"/>

    <!-- Compilation parameters -->
    <!--<property name="debug" value="off"/>
    <property name="debuglevel" value=""/> -->
    <property name="debug" value="true"/>
    <property name="debuglevel" value="lines,vars,source"/>
    <property name="compat.source" value="1.7"/>
    <property name="compat.target" value="1.7"/>
	<property name="ant.build.javac.source" value="1.7"/>
	<property name="ant.build.javac.target" value="1.7"/>

    <!-- paths -->
    <path id="classpath">
        <fileset id="ext.libs" dir="${basedir}/lib">
            <!-- older ant jar, which izpack distributes and uses for fileset behavior -->
            <include name="ant.jar"/>
            <include name="jakarta-regexp-1.3.jar"/>
            <include name="mongo-java-driver-3.12.5.jar"/>
            <include name="jna-4.0.0.jar"/>
            <include name="jna-platform-4.0.0.jar"/>
        </fileset>
        <!-- current ant jar, for compiling IzPackTask which uses modern ant features -->
        <fileset dir="${ant.home}/lib" includes="ant.jar"/>
    </path>

    <!-- Checking target -->
    <target name="check">
        <echo message="basedir=${basedir}"/>
        <echo message="dist.dir=${dist.dir}"/>
        <echo message="build.dir=${build.dir}"/>
        <echo message="debug=${debug}"/>
    </target>

    <!-- Creates the classes directory -->
    <target name="prepare" depends="time">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${basedir}/lib"/>
        <mkdir dir="${dist.dir}"/>
    </target>

    <!-- Compiles the compiler src files -->
    <target name="compile.compiler" depends="prepare">
        <javac srcdir="${src.dir}"
        	includeantruntime="yes"
            classpath="${basedir}/lib/jakarta-regexp-1.3.jar:${basedir}/lib/mongo-java-driver-3.4.2.jar:${basedir}/lib/jna-4.0.0.jar:${basedir}/lib/jna-platform-4.0.0.jar"
               destdir="${build.dir}"
               optimize="on"
               source="${compat.source}"
               target="${compat.target}"
               deprecation="on"
               debug="${debug}"
               debuglevel="${debuglevel}"
   		 	   encoding="utf-8">
            <!-- 
                <include name="com/izforge/izpack/*.java"/>
            <include name="com/izforge/izpack/io/*.java"/>
            <include name="com/izforge/izpack/compiler/*.java"/>
            <include name="com/izforge/izpack/compressor/*.java"/>
            <include name="com/izforge/izpack/ant/*.java"/>
            <include name="com/izforge/izpack/util/Debug.java"/>
            <include name="com/izforge/izpack/util/OsConstraint.java"/>
            <include name="com/izforge/izpack/util/JarOutputStream.java"/>
            <include name="com/izforge/izpack/rules/*.java"/>
            <include name="com/izforge/izpack/adaptator/**/*.java"/>
            <include name="com/izforge/izpack/adaptator/*.java"/> -->
        </javac>
    </target>

    <!-- Package compiler.jar -->
    <target name="build.compiler" depends="compile.compiler">
        <jar jarfile="${compiler.jar}">
            <manifest>
                <attribute name="Built-By" value="IzPack"/>
                <attribute name="Class-Path" value="ant.jar"/>
                <attribute name="Main-Class" value="${compiler.class}"/>
            </manifest>
            <fileset dir="${build.dir}">
                <!-- 
                    <include name="com/izforge/izpack/*.class"/>
                <include name="com/izforge/izpack/io/*.class"/>
                <include name="com/izforge/izpack/compiler/*.class"/>
                <include name="com/izforge/izpack/compressor/*.class"/>
                <include name="com/izforge/izpack/util/OsConstraint.class"/>
                <include name="com/izforge/izpack/util/Debug.class"/>
                <include name="com/izforge/izpack/util/*Validator.class"/>
                <include name="com/izforge/izpack/util/*Processor.class"/>
                <include name="com/izforge/izpack/util/VariableSubstitutor.class"/>
                <include name="com/izforge/izpack/util/JarOutputStream.class"/>
                <include name="com/izforge/izpack/util/FileUtil.class"/>
                <include name="com/izforge/izpack/ant/*.class"/>
                <include name="com/izforge/izpack/ant/langpacks/*.properties"/>
                <include name="com/izforge/izpack/adaptator/*.xsl"/>
                <include name="com/izforge/izpack/event/CompilerListener.class"/>
                <include name="com/izforge/izpack/event/SimpleCompilerListener.class"/>
                <include name="com/izforge/izpack/rules/*.class"/>
                <include name="com/izforge/izpack/installer/*.class"/>
            	<include name="com/izforge/izpack/panels/*.class"/>
                <include name="com/izforge/izpack/adaptator/**/*.class"/>
                <include name="com/izforge/izpack/adaptator/*.class"/> 
                -->
            </fileset>
        </jar>
    </target>

    <!-- Package standalone-compiler.jar -->
    <target name="build.standalone-compiler"
            depends="compile.compiler, build.panels, build.listeners">
        <jar jarfile="${standalone-compiler.jar}" duplicate="preserve">
            <manifest>
                <attribute name="Built-By" value="IzPack"/>
                <!-- <attribute name="Class-Path" value="ant.jar"/> -->
                <attribute name="Main-Class" value="${compiler.class}"/>
            </manifest>
			<fileset dir="${build.dir}">
                <include name="**/*.class"/>
			</fileset>
            <!-- <zipfileset src="lib/ant.jar"/> -->
            <fileset dir="${basedir}">
                <include name="bin/langpacks/flags/*"/>
                <include name="bin/native/3rdparty/*"/>
                <include name="bin/panels/*Panel.jar"/>
                <include name="bin/customActions/*.jar"/>
                <include name="lib/*.jar"/>
				<exclude name="lib/standalone-compiler.jar"/>
            </fileset>
             <fileset dir="${src.dir}">
                <include name="**/*"/>
                <exclude name="**/*.java"/>
            </fileset>
        </jar>
    </target>

    <!--
         ======================================================================
           Create Panel Modules
         ======================================================================
    -->

    <!-- Macro to compile a panel's classes and create it's jar file -->
    <macrodef name="build-panel">
        <attribute name="name" description="The panels jar will get this name"/>
        <attribute name="srcdir"
                   default="${src.dir}"
                   description="Source directory. Defaults to izpack src dir"/>
        <element name="panel-fileset"
                 implicit="yes"
                 description="include and exclude elements indicating panel sources"/>
        <sequential>
            <echo message="build-panel: @{name}"/>
            <mkdir dir="${bin.dir}/panels/@{name}"/>
            <!-- sourcepath is cleared so there's no mistaking what goes into the Panel -->
            <javac srcdir="@{srcdir}"
            	includeantruntime="yes"
                   destdir="${bin.dir}/panels/@{name}"
                   classpath="${installer.jar}"
                   sourcepath=""
                   optimize="on"
                   deprecation="on"
                   debug="${debug}"
                   source="${compat.source}"
                   target="${compat.target}"
                   debuglevel="${debuglevel}"
            	   encoding="utf-8">
                <panel-fileset/>
            </javac>
            <jar jarfile="${bin.dir}/panels/@{name}.jar" basedir="${bin.dir}/panels/@{name}"/>
        </sequential>
    </macrodef>

    <!-- Compile all panels and put them at the right location -->
    <!--
         If you add a another, and the build fails because it can't find a class,
         be sure to explicitly include the .java file in the nested fileset.
         This also acts as a check to help limit dependancies.
    -->
    <target name="build.panels" depends="">
        <mkdir dir="${bin.dir}/panels"/>
       
<!--        
        <build-panel name="InstallationTypePanel">
            <include name="com/izforge/izpack/panels/InstallationTypePanel.java"/>
            <include name="com/izforge/izpack/panels/InstallationTypePanelConsoleHelper.java"/>
            <include name="com/izforge/izpack/panels/InstallationTypePanelAutomationHelper.java"/>
            <include name="com/izforge/izpack/util/os/*RegistryHandler.java"/>
            <include name="com/izforge/izpack/util/OSClassHelper.java"/>
            <include name="com/izforge/izpack/util/os/WrappedNativeLibException.java"/>
            <include name="com/coi/tools/os/win/*.java"/>
            <include name="com/coi/tools/os/win/resources/NativeLibErr*.java"/>
            <include name="com/coi/tools/os/izpack/Registry.java"/>
            <include name="com/coi/tools/os/izpack/COIOSHelper.java"/>
        </build-panel>
        <build-panel name="InstallTypePanel">
            <include name="com/izforge/izpack/panels/PathInputPanel.java"/>
            <include name="com/izforge/izpack/panels/PathSelectionPanel.java"/>
            <include name="com/izforge/izpack/panels/TargetPanel.java"/>
            <include name="com/izforge/izpack/panels/TargetPanelAutomationHelper.java"/>
        	<include name="com/izforge/izpack/panels/TargetPanelConsoleHelper.java" />
        	<include name="com/izforge/izpack/panels/InstallTypePanel.java" />
            <include name="com/izforge/izpack/panels/InstallTypePanelConsoleHelper.java"/>
            <include name="com/izforge/izpack/panels/InstallTypePanelAutomationHelper.java"/>
            <include name="com/izforge/izpack/panels/InstallationTypePanelAutomationHelper.java"/>
            <include name="com/izforge/izpack/util/os/*RegistryHandler.java"/>
            <include name="com/izforge/izpack/util/OSClassHelper.java"/>
            <include name="com/izforge/izpack/util/os/WrappedNativeLibException.java"/>
            <include name="com/coi/tools/os/win/*.java"/>
            <include name="com/coi/tools/os/win/resources/NativeLibErr*.java"/>
            <include name="com/coi/tools/os/izpack/Registry.java"/>
            <include name="com/coi/tools/os/izpack/COIOSHelper.java"/>
        </build-panel>
        <build-panel name="HTMLHelloPanel">
            <include name="com/izforge/izpack/panels/HTMLHelloPanel.java"/>
            <include name="com/izforge/izpack/panels/HTMLInfoPanel.java"/>
        </build-panel> -->
    </target>

    <!--
         ======================================================================
           Create Listener Modules
         ======================================================================
    -->

    <!-- Macro to compile a listener's classes and create its jar file -->
    <macrodef name="build-listener">
        <attribute name="name" description="The listener jar will get this name"/>
        <attribute name="classpath-ext" description="An extension of the classpath required to build the listener"
                   default=""/>
        <attribute name="srcdir"
                   default="${src.dir}"
                   description="Source directory. Defaults to izpack src dir"/>
        <attribute name="izeventExcludes"
                   description="excludes patter for files in the ${izevent.jar} file"/>
        <element name="listener-fileset"
                 implicit="yes"
                 description="include and exclude elements indicating listener sources"/>
        <sequential>
            <echo message="build-listener: @{name}"/>
            <mkdir dir="${bin.dir}/customActions/@{name}"/>
            <!-- sourcepath is cleared so there's no mistaking what goes into the Listener -->
            <javac srcdir="@{srcdir}"
            	includeantruntime="yes"
                   destdir="${bin.dir}/customActions/@{name}"
                   classpath="${installer.jar};${compiler.jar};${izevent.jar};@{classpath-ext}"
                   sourcepath=""
                   optimize="on"
                   deprecation="on"
                   debug="${debug}"
                   source="${compat.source}"
                   target="${compat.target}"
                   debuglevel="${debuglevel}"
    		 	   encoding="utf-8">
                <listener-fileset/>
            </javac>
            <jar jarfile="${bin.dir}/customActions/@{name}.jar"
                 basedir="${bin.dir}/customActions/@{name}">
                <!-- also include files from the previously built ${izevent.jar} -->
                <zipfileset src="${izevent.jar}" excludes="@{izeventExcludes}"/>
            </jar>
        </sequential>
    </macrodef>

    <!-- Convenience macro to call build-listener for compiler listeners -->
    <macrodef name="build-compiler-listener">
        <attribute name="name"/>
        <attribute name="srcdir" default="${src.dir}"/>
        <element name="compiler-fileset"
                 implicit="yes"
                 description="include and exclude elements indicating listener sources"/>
        <sequential>
            <build-listener name="@{name}"
                            srcdir="@{srcdir}"
                            izeventExcludes="**/*Installer*,**/*Uninstaller*">
                <compiler-fileset/>
            </build-listener>
        </sequential>
    </macrodef>
    
    
    <!-- Convenience macro to call build-listener for installer listeners -->
    <macrodef name="build-installer-listener">
        <attribute name="name"/>
        <attribute name="classpath-ext" description="An extension of the classpath required to build the listener"
                   default=""/>
        <attribute name="srcdir" default="${src.dir}"/>
        <element name="installer-fileset"
                 implicit="yes"
                 description="include and exclude elements indicating listener sources"/>
        <sequential>
            <build-listener name="@{name}" srcdir="@{srcdir}" izeventExcludes="**/*Uninstaller*,**/*Compiler*"
                            classpath-ext="@{classpath-ext}">
                <installer-fileset/>
            </build-listener>
        </sequential>
    </macrodef>

    <!-- Convenience macro to call build-listener for uninstaller listeners -->
    <macrodef name="build-uninstaller-listener">
        <attribute name="name"/>
        <attribute name="srcdir" default="${src.dir}"/>
        <attribute name="classpath-ext" description="An extension of the classpath required to build the listener"
                   default=""/>
        <element name="uninstaller-fileset"
                 implicit="yes"
                 description="include and exclude elements indicating listener sources"/>
        <sequential>
            <build-listener name="@{name}" srcdir="@{srcdir}" izeventExcludes="**/*Installer*,**/*Compiler*"
                            classpath-ext="@{classpath-ext}">
                <uninstaller-fileset/>
            </build-listener>
        </sequential>
    </macrodef>
    
    <!-- Compile all custom actions (listener) and put them at the right location -->
    <!--
         If you add a another, and the build fails because it can't find a class,
         be sure to explicitly include the .java file in the nested fileset.
         This also acts as a check to help limit dependancies.
    -->
    <target name="build.listeners" depends="build.compiler">
        <!-- This dependency is mandatory -->
        
<!--         
        <build-installer-listener name="LateShortcutInstallListener"
                                  classpath-ext="${bin.dir}/panels/ShortcutPanel.jar">
            <include name="com/izforge/izpack/event/LateShortcutInstallListener.java"/>
        </build-installer-listener>

        <build-installer-listener name="AntActionInstallerListener">
            <include name="com/izforge/izpack/event/AntActionInstallerListener.java"/>
            <include name="com/izforge/izpack/event/AntAction.java"/>
        </build-installer-listener>

        <build-uninstaller-listener name="AntActionUninstallerListener">
            <include name="com/izforge/izpack/event/AntActionUninstallerListener.java"/>
            <include name="com/izforge/izpack/event/AntAction.java"/>
        </build-uninstaller-listener>

        <build-installer-listener name="SummaryLoggerInstallerListener">
            <include name="com/izforge/izpack/event/SummaryLoggerInstallerListener.java"/>
        </build-installer-listener>

        <build-installer-listener name="RegistryInstallerListener">
            <include name="com/izforge/izpack/event/RegistryInstallerListener.java"/>
            <include name="com/izforge/izpack/event/NativeInstallerListener.java"/>
            <include name="com/izforge/izpack/util/os/*RegistryHandler.java"/>
            <include name="com/izforge/izpack/util/OSClassHelper.java"/>
            <include name="com/izforge/izpack/util/os/WrappedNativeLibException.java"/>
            <include name="com/coi/tools/os/win/*.java"/>
            <include name="com/coi/tools/os/win/resources/NativeLibErr*.java"/>
            <include name="com/coi/tools/os/izpack/Registry.java"/>
            <include name="com/coi/tools/os/izpack/COIOSHelper.java"/>
        </build-installer-listener>

        <build-installer-listener name="AdxCompInstallerListener">
            <include name="com/izforge/izpack/event/RegistryInstallerListener.java"/>
            <include name="com/izforge/izpack/event/AdxCompInstallerListener.java"/>
            <include name="com/izforge/izpack/event/NativeInstallerListener.java"/>
            <include name="com/izforge/izpack/util/os/*RegistryHandler.java"/>
            <include name="com/izforge/izpack/util/OSClassHelper.java"/>
            <include name="com/izforge/izpack/util/os/WrappedNativeLibException.java"/>
            <include name="com/coi/tools/os/win/*.java"/>
            <include name="com/coi/tools/os/win/resources/NativeLibErr*.java"/>
            <include name="com/coi/tools/os/izpack/Registry.java"/>
            <include name="com/coi/tools/os/izpack/COIOSHelper.java"/>
            <include name="com/izforge/izpack/util/xml/XMLHelper.java"/>
        </build-installer-listener>

        <build-installer-listener name="UpdateListener">
            <include name="com/izforge/izpack/event/UpdateListener.java"/>
        </build-installer-listener>

        <build-uninstaller-listener name="RegistryUninstallerListener">
            <include name="com/izforge/izpack/event/RegistryUninstallerListener.java"/>
            <include name="com/izforge/izpack/event/NativeUninstallerListener.java"/>
            <include name="com/izforge/izpack/util/os/*RegistryHandler.java"/>
            <include name="com/izforge/izpack/util/OSClassHelper.java"/>
            <include name="com/izforge/izpack/util/os/WrappedNativeLibException.java"/>
            <include name="com/coi/tools/os/win/*.java"/>
            <include name="com/coi/tools/os/win/resources/NativeLibErr*.java"/>
            <include name="com/coi/tools/os/izpack/Registry.java"/>
            <include name="com/coi/tools/os/izpack/COIOSHelper.java"/>
        </build-uninstaller-listener>

        <build-uninstaller-listener name="AdxCompUninstallerListener">
            <include name="com/izforge/izpack/event/RegistryUninstallerListener.java"/>
            <include name="com/izforge/izpack/event/AdxCompUninstallerListener.java"/>
            <include name="com/izforge/izpack/event/NativeUninstallerListener.java"/>
            <include name="com/izforge/izpack/util/os/*RegistryHandler.java"/>
            <include name="com/izforge/izpack/util/OSClassHelper.java"/>
            <include name="com/izforge/izpack/util/os/WrappedNativeLibException.java"/>
            <include name="com/coi/tools/os/win/*.java"/>
            <include name="com/coi/tools/os/win/resources/NativeLibErr*.java"/>
            <include name="com/coi/tools/os/izpack/Registry.java"/>
            <include name="com/coi/tools/os/izpack/COIOSHelper.java"/>
            <include name="com/izforge/izpack/util/xml/XMLHelper.java"/>
        </build-uninstaller-listener>

        <build-installer-listener name="BSFInstallerListener" classpath-ext="$${basedir}/lib/bsf.jar">
            <include name="com/izforge/izpack/event/BSFInstallerListener.java" />
            <include name="com/izforge/izpack/event/BSFAction.java" />
        </build-installer-listener>

        <build-installer-listener name="ProgressBarInstallerListener">
            <include name="com/izforge/izpack/event/ProgressBarInstallerListener.java"/>
        </build-installer-listener>

        <build-uninstaller-listener name="BSFUninstallerListener" classpath-ext="$${basedir}/lib/bsf.jar">
            <include name="com/izforge/izpack/event/BSFUninstallerListener.java" />
            <include name="com/izforge/izpack/event/BSFAction.java" />
        </build-uninstaller-listener> -->

        <!-- CUSTOM ACTION test START
        <build-compiler-listener name="ChmodCompilerListener">
            <include name="com/myCompany/tools/install/listener/ChmodCompilerListener.java"/>
        </build-compiler-listener>

        <build-installer-listener name="ChmodInstallerListener">
            <include name="com/myCompany/tools/install/listener/ChmodInstallerListener.java"/>
        </build-installer-listener>
        COSTOM ACTION test END -->
    </target>

    <!-- ====================================================================== -->

    <!-- Performs some cleanups -->
    <target name="clean" description="cleans up the dist">
        <echo message="Cleaning-up"/>
        <delete includeEmptyDirs="true" quiet="true">
            <fileset dir="${build.dir}"/>
            <fileset dir="${dist.dir}"/>
            <fileset dir="${basedir}/bin/panels/">
                <include name="**/*"/>
            </fileset>
            <fileset dir="${basedir}/bin/customActions/">
                <include name="**/*"/>
            </fileset>
            <fileset dir="${basedir}/lib/">
                <include name="compiler.jar"/>
                <include name="izevent.jar"/>
                <include name="standalone-compiler.jar"/>
                <include name="frontend.jar"/>
                <include name="installer.jar"/>
                <include name="uninstaller.jar"/>
            </fileset>
        </delete>
        <delete file="bin/native/3rdparty/COIOSHelper.dll"/>
        <delete dir="${basedir}/bin/native/izpack"/>
        <delete dir="${basedir}/src/doc-reST/html"/>
        <delete dir="${basedir}/src/doc-reST/pdf"/>
        <delete includeEmptyDirs="true" dir="${basedir}/doc/izpack"/>
        <delete dir="${basedir}/_src${dist.subdir}"/>
    </target>

    <!-- Builds all compilation targets -->
    <target name="all"
            depends="clean, splashscreen,build.compiler, build.compiler, build.panels, build.listeners, build.standalone-compiler"
            description="base: compiles a developer version"/>

    <!-- Builds the Javadoc -->
    <target name="build.javadoc" depends="prepare" description="Builds the javadoc">
        <mkdir dir="${build.dir}/javadoc"/>
        <javadoc destdir="${build.dir}/javadoc" access="private" classpathref="classpath">
            <packageset dir="${src.dir}">
                <exclude name="**/CVS"/>
            </packageset>
        </javadoc>
        <copy todir="${doc.dir}/izpack/javadoc" preservelastmodified="true">
            <fileset dir="${build.dir}/javadoc">
                <include name="**/*"/>
            </fileset>
        </copy>
    </target>

    <target name="build.docu" description="Builds the customer documentation">
        <exec executable="${basedir}/src/doc-reST/build.py" dir="${basedir}/src/doc-reST">
            <arg value="build.py"/>
        </exec>

        <mkdir dir="${doc.dir}/izpack/html"/>
        <copy todir="${doc.dir}/izpack/html" preservelastmodified="true">
            <fileset dir="${basedir}/src/doc-reST/html">
                <include name="**/*"/>
            </fileset>
        </copy>
        <mkdir dir="${doc.dir}/izpack/pdf"/>
        <copy todir="${doc.dir}/izpack/pdf" preservelastmodified="true">
            <fileset dir="${basedir}/src/doc-reST/pdf">
                <include name="manual.pdf"/>
            </fileset>
        </copy>

        <delete file="${basedir}/src/texput.log"/>
        <delete dir="${basedir}/src/doc-reST/html"/>
        <delete dir="${basedir}/src/doc-reST/pdf"/>
    </target>

    <target name="create.docu"
            depends="build.javadoc, build.docu"
            description="Creates the javadoc-api and customer documentation">

    </target>


    <!-- - - - - - - - - - - - - - - - - -
          target: taskdef
         - - - - - - - - - - - - - - - - - -->
    <target name="taskdef.dist">
        <!-- Allows us to use the IzPack Ant task -->
        <taskdef name="izpack"
                 classpath="${basedir}/lib/compiler.jar"
                 classname="com.izforge.izpack.ant.IzPackTask"/>
    </target>




    <!-- - - - - - - - - - - - - - - - - -
          target: copy.distfiles
         - - - - - - - - - - - - - - - - - -->
    <target name="copy.dist.files">
        <echo message="Copies the general files to the dist directory"/>
        <copy todir="${dist.dir}" includeEmptyDirs="yes" preservelastmodified="true">
            <fileset dir="${basedir}">
                <include name="bin/**"/>
                <include name="utils/**"/>
                <include name="lib/*.jar"/>
                <include name="doc/**"/>
                <include name="legal/**"/>
                <include name="src/**"/>
                <include name="sample/**"/>
                <include name="*.txt"/>
                <include name="*.html"/>
            </fileset>
        </copy>
        <echo message="Copies the license images and specs to the dist directory"/>
        <copy todir="${dist.dir}" includeEmptyDirs="yes" preservelastmodified="true">
            <fileset dir="${dist-files.dir}">
                <include name="useNativeLAF"/>
                <include name="*.jpg"/>
                <include name="*.png"/>
                <include name="*.html"/>
                <include name="Licence.txt"/>
                <include name="IzPack-install*.xml"/>
                <include name="shortcutSpec.xml"/>
                <include name="Unix_shortcutSpec.xml"/>
                <include name="RegistrySpec.xml"/>
                <include name="conditions.xml"/>
            </fileset>
        </copy>
        <echo message="Copies the bin files to the dist directory"/>
        <copy todir="${dist.dir}/bin" includeEmptyDirs="yes" overwrite="yes" preservelastmodified="true">
            <fileset dir="${dist-files.dir}">
                <include name="compile*"/>
                <include name="lcp.bat"/>
                <include name="start.sh"/>
            </fileset>
        </copy>
    </target>


    <!-- - - - - - - - - - - - - - - - - -
          target: replace.dist.buildnumber
         - - - - - - - - - - - - - - - - - -->
    <target name="replace.dist.buildnumber">
        <replace file="${dist.dir}/shortcutSpec.xml"
                 token="@build.number@"
                 value="${build.number}"
                 summary="yes"/>
        <replace file="${dist.dir}/shortcutSpec.xml" token="@ver@" value="${ver}" summary="yes"/>

        <replace file="${dist.dir}/Unix_shortcutSpec.xml"
                 token="@build.number@"
                 value="${build.number}"
                 summary="yes"/>
        <replace file="${dist.dir}/Unix_shortcutSpec.xml"
                 token="@ver@"
                 value="${ver}"
                 summary="yes"/>
    </target>

    <!-- Creates an installer for IzPack -->
    <target name="exec.izpack.compiler">

        <!-- We call IzPack -->
        <echo message="Makes the installer using IzPack" level="verbose"/>
        <izpack input="${dist.dir}/${installer.xmlfile}"
                output="${dist.dir}/${installer.name}${ver}.${rel}.jar"
                installerType="standard"
                basedir="${dist.dir}"
                izPackDir="${dist.dir}/"
                compression="deflate"
                compressionlevel="9"/>
        <echo>
            sucessfully created:
            ${dist.dir}/${installer.name}${ver}.${rel}.jar
        </echo>
    </target>


    <!-- - - - - - - - - - - - - - - - - -
          target: prepare.install.dist
         - - - - - - - - - - - - - - - - - -->
    <target name="prepare.install.dist"
            depends="taskdef.dist, copy.dist.files, replace.dist.buildnumber, fix.crlf">

    </target>

    <!-- =================================
	   Creates a normal installer for IzPack
	  ================================= -->
    <target name="generate.installer" depends="prepare.install.dist">
        <antcall target="exec.izpack.compiler">
            <param name="installer.xmlfile" value="IzPack-install.xml"/>
            <param name="installer.name" value="${product}-install-"/>
        </antcall>
    </target>

    <!--
        Fixes CR/LF by applying the Unix convention (\n for endlines).
        It also fixes the encoding problems by moving it to UTF-8.
    -->
    <target name="fix.crlf">
        <property name="dist.src.dir" location="${dist.dir}/src"/>
        <property name="dist.bin.dir" location="${dist.dir}/bin"/>
        <echo>
            Fixing linefeeds for several files in:
            "${dist.src.dir}"
            and
            "${dist.bin.dir}"
        </echo>
        <fixcrlf srcDir="${dist.src.dir}" eol="lf" eof="remove" encoding="UTF-8">
            <include name="**/*.java"/>
            <include name="**/*.xml"/>
            <include name="**/*.properties"/>
        </fixcrlf>
        <fixcrlf srcdir="${dist.dir}" eol="unix" eof="remove">
            <include name="**/*.sh"/>
            <include name="dist-files/compile"/>
        </fixcrlf>
        <fixcrlf srcdir="${dist.bin.dir}" eol="unix" eof="remove">
            <include name="**/*.sh"/>
            <include name="compile"/>
        </fixcrlf>
        <fixcrlf srcdir="${dist.dir}" eol="dos" eof="add">
            <include name="**/*.bat"/>
        </fixcrlf>
        <fixcrlf srcdir="${dist.bin.dir}" eol="dos" eof="add">
            <include name="**/*.bat"/>
        </fixcrlf>
    </target>

    <!-- Runs a testing installer. -->
    <target name="run.installer">
        <java jar="${basedir}/_dist/IzPack-install-${build.number}.jar" fork="true"/>
    </target>

    <!-- Makes everything, from compilation to generating an installer. -->
    <target name="quickdist"
            depends="all, generate.installer"
            description="makes a installer without docu"/>

    <!-- Makes everything, from compilation, customer and javadoc to generating an installer. -->
    <target name="dist"
            depends="src.tar.gz, all, create.docu, generate.installer"
            description="makes a complete installer"/>

    <!-- Makes everything, from Cleaning to generating both installers: normal and reg support. -->
    <target name="cleandistreg"
            depends="clean, splashscreen, dist, generate.installer"
            description="creates a full dist with Win32 uninstall registry support"/>

    <!-- =================================
          target: clean.src.tar.gz
         ================================= -->
    <target name="clean.src.tar.gz" depends="clean, src.tar.gz" description="--> creates a src.tar.gz after clean up">
    </target>


    <!-- =================================
          target: src.tar.gz
         ================================= -->
    <target name="src.tar.gz" description="--> creates a src.tar.gz ">
        <mkdir dir="${basedir}/_src${dist.subdir}"/>
        <property name="src.tar.gz" value="${basedir}/_src${dist.subdir}/${product}-src-${ver}.${rel}.tar.gz"/>
        <tar compression="gzip" destfile="${src.tar.gz}" basedir="${basedir}"
             excludes="_src${dist.subdir}/**, _dist/**, _build/**, bin/panels/**, bin/customActions/**, doc/izpack/**, eclipse-bin/**, lib/standalone-compiler.jar, lib/izevent.jar, lib/uninstaller*, lib/installer.jar, lib/compiler.jar"/>
    </target>


    <!-- convenient :) makes a quick dist (w/o docu), an installer and run them. -->
    <target name="quickdist+run"
            depends="quickdist, run.installer"
            description="makes a quickdist installer and runs them"/>

    <!-- convenient :) makes a complete dist an installer and run them. -->
    <target name="dist+run"
            depends="dist, run.installer"
            description="makes a complete installer and runs them"/>

    <!-- ** splashscreen **
	  shows some ANT specific- and JAVA-
	  but Platform and Project-independed Properties.
	================================================================ -->
    <target name="splashscreen"
            depends="time"
            description="shows the used environment and project settings">

        <property name="console_line" value="**************************************************"/>
        <echo message="${console_line}"/>
        <echo message="* ${ant.version}"/>
        <echo message="*   Java JRE version ${ant.java.version} ${java.vm.vendor}"/>
        <exec executable="${java.home}/bin/java">
            <arg line="-version"/>
        </exec>
        <echo message="${console_line}"/>
        <echo message="*  processing file ....... '${ant.file}'"/>
        <echo message="*  in base-directory ..... '${basedir}'"/>
        <echo message="*  building project ...... '${ant.project.name}'"/>
        <echo message="*  working in directory .. '${cwd}'"/>
        <echo message="${console_line}"/>
    </target>



    <!-- =================================
         target: time - takes a timestamp
        ================================= -->
    <target name="time">
        <tstamp/>
    </target>


    <!-- =================================
          target: dump.properties - dumps the curent properties into the $os_$timestamp.properties file
         ================================= -->
    <target name="dump.properties" depends="time" description="dump.environment (for debug)">
        <echoproperties
                destfile="${basedir}/ant_properties_at_${os.name}-${os.arch}-${os.version}_at_${DSTAMP}-${TSTAMP}.txt"/>
    </target>


</project>

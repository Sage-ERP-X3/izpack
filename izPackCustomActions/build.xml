<?xml version="1.0" encoding="UTF-8"?>
<project name="IzPack" default="all" basedir="..">
    <!--
  $Id$

  build.xml first written by Pierre Dittgen (pierre.dittgen@criltelecom.com)
  This file is intended to be used with ant (http://jakarta.apache.org/ant),
  a java/xml makefile utility.

  Mini-HowTo:

  To compile and package the installer.jar jar file, type:
    ant build.installer

  To compile the panels and put them in the bin/panels directory, type:
    ant build.panels

    To compile and package the frontend.jar jar file, type:
        ant build.frontend

  To make all, type:
    ant all
  or
    ant
  (this is the default target)

    To compile and create IzPack distribution package type:
    ant dist

    To delete the classes directory after packaging, just type:
    ant clean
  -->

    <!-- Compiler to use put your own here (jikes, modern, gcj, ...) -->
    <!--<property name="build.compiler" value="jikes" />-->

    <!-- Define directories -->
    <property name="cwd" value="${basedir}"/>

    <property file="izPackCustomActions/src/ant.properties"/>
    <property name="ver" value="4.3"/>
    <property name="rel" value="5"/>
    <property name="build.number" value="${ver}.${rel}"/>

    <property name="src.dir" value="${basedir}/izPackCustomActions/src"/>
    <property name="img.dir" value="${basedir}/src/img"/>
    <property name="lib.dir" value="${basedir}/lib"/>
    <property name="bin.dir" value="${basedir}/izPackCustomActions/bin"/>
    <property name="doc.dir" value="${basedir}/doc"/>

    <property name="build.dir" value="${basedir}/izPackCustomActions"/>

    <property name="dist.subdir" value="_dist"/>
    <property name="dist.dir" value="${basedir}/${dist.subdir}"/>
    <property name="dist-files.dir" value="${basedir}/src/dist-files"/>

    <!-- Define Main-Classes -->
    <property name="compiler.class" value="com.izforge.izpack.compiler.Compiler"/>
    <property name="installer.class" value="com.izforge.izpack.installer.Installer"/>

    <!-- Define file paths -->
    <property name="com.sage.izpack.jar" value="${basedir}/izPackCustomActions/com.sage.izpack.jar"/>
    <property name="installer.jar" value="${basedir}/izPackCustomActions/sagejar/installer.jar"/>

    <!-- Compilation parameters -->
    <!--<property name="debug" value="off"/>
    <property name="debuglevel" value=""/> -->
    <property name="debug" value="true"/>
    <property name="debuglevel" value="lines,vars,source"/>
    <property name="compat.source" value="1.8"/>
    <property name="compat.target" value="1.8"/>
    <property name="ant.build.javac.source" value="1.8"/>
    <property name="ant.build.javac.target" value="1.8"/>

    <!-- paths -->
    <path id="classpath">
        <fileset id="ext.libs" dir="${basedir}/lib">
            <!-- older ant jar, which izpack distributes and uses for fileset behavior -->
            <include name="ant.jar"/>
            <include name="jakarta-regexp-1.3.jar"/>
            <include name="mongo-java-driver-3.12.5.jar"/>
            <include name="jna-5.14.0.jar"/>
            <include name="jna-platform-5.14.0.jar"/>
        </fileset>
        <!-- current ant jar, for compiling IzPackTask which uses modern ant features -->
        <fileset dir="${ant.home}/lib" includes="ant.jar"/>
    </path>

    <!-- Checking target -->
    <target name="check">
        <echo message="basedir=${basedir}"/>
        <echo message="dist.dir=${dist.dir}"/>
        <echo message="build.dir=${build.dir}"/>
        <echo message="debug=${debug}"/>
    </target>

    <!-- Creates the classes directory -->
    <target name="prepare" depends="time">
        <mkdir dir="${build.dir}"/>
        <mkdir dir="${basedir}/lib"/>
        <mkdir dir="${dist.dir}"/>
    </target>


    <!--
         ======================================================================
           Create Listener Modules
         ======================================================================
    -->

    <!-- Macro to compile a listener's classes and create its jar file -->
    <macrodef name="build-listener">
        <attribute name="name" description="The listener jar will get this name"/>
        <attribute name="classpath-ext" description="An extension of the classpath required to build the listener" default=""/>
        <attribute name="srcdir" default="${src.dir}" description="Source directory. Defaults to izpack src dir"/>
        <element name="listener-fileset" implicit="yes" description="include and exclude elements indicating listener sources"/>
        <sequential>
            <echo message="build-listener: @{name}"/>
            <mkdir dir="${bin.dir}/@{name}"/>
            <!-- sourcepath is cleared so there's no mistaking what goes into the Listener -->
            <javac srcdir="@{srcdir}" includeantruntime="yes" destdir="${bin.dir}/@{name}" classpath="${installer.jar};@{classpath-ext}" sourcepath="" optimize="on" deprecation="on" debug="${debug}" source="${compat.source}" target="${compat.target}" debuglevel="${debuglevel}" encoding="utf-8">
                <include name="com/sage/izpack/*.java"/>
                <include name="com/sage/izpack/*.xml"/>
                <include name="com/sage/izpack/*.properties"/>
                <include name="com/izforge/izpack/*.java"/>
                <include name="com/izforge/izpack/util/*.java"/>
                <include name="com/izforge/izpack/*.xml"/>
                <include name="com/izforge/izpack/*.properties"/>
                <listener-fileset/>
            </javac>
            <jar jarfile="${bin.dir}/@{name}.jar" basedir="${bin.dir}/@{name}">

                <fileset dir="${bin.dir}">
                    <include name="**/*.class"/>
                </fileset>
                <fileset dir="${src.dir}">
                    <include name="**/*.properties"/>
                    <include name="**/*.xml"/>
                </fileset>
                <!-- also include files from the previously built ${izevent.jar} -->
                <!-- <zipfileset src="${izevent.jar}" excludes="@{izeventExcludes}"/> -->
            </jar>
        </sequential>
    </macrodef>



    <!-- Convenience macro to call build-listener for installer listeners -->
    <macrodef name="build-installer-listener">
        <attribute name="name"/>
        <attribute name="classpath-ext" description="An extension of the classpath required to build the listener" default=""/>
        <attribute name="srcdir" default="${src.dir}"/>
        <element name="installer-fileset" implicit="yes" description="include and exclude elements indicating listener sources"/>
        <sequential>
            <build-listener name="@{name}" srcdir="@{srcdir}" classpath-ext="@{classpath-ext}">
                <installer-fileset/>
            </build-listener>
        </sequential>
    </macrodef>


    <!-- Compile all custom actions (listener) and put them at the right location -->
    <!--
         If you add a another, and the build fails because it can't find a class,
         be sure to explicitly include the .java file in the nested fileset.
         This also acts as a check to help limit dependancies.
    -->
    <target name="build.com.sage.izpack">

        <build-installer-listener name="com.sage.izpack" classpath-ext="${basedir}/lib/izpack-core-5.2.1.jar;${basedir}/lib/izpack-uninstaller-5.2.1.jar;${basedir}/lib/izpack-util-5.2.1.jar;${basedir}/lib/izpack-api-5.2.1.jar;${basedir}/lib/izpack-tools-5.2.1.jar;${basedir}/lib/izpack-event-5.2.1.jar;${basedir}/lib/izpack-installer-5.2.1.jar;${basedir}/lib/izpack-panel-5.2.1.jar;${basedir}/lib/izpack-gui-5.2.1.jar;${basedir}/lib/jline-2.12.1.jar;${basedir}/izPackCustomActions/libs/bcpkix-jdk15on-150.jar;${basedir}/izPackCustomActions/libs/bcprov-jdk15on-150.jar;${basedir}/izPackCustomActions/libs/mongo-java-driver-3.12.5.jar;${basedir}/izPackCustomActions/libs/jna-5.14.0.jar;${basedir}/izPackCustomActions/libs/jna-platform-5.14.0.jar">
            <include name="ArchitectureChecker.java"/>
            <include name="AdxCompHelper.java"/>
            <include name="AdxCompInstallerListener.java"/>
            <include name="AdxCompUninstallerListener.java"/>
            <include name="CheckProductAlreadyInstalled.java"/>
            <include name="CheckedHelloNewConsolePanel.java"/>
            <include name="CheckedHelloNewPanel.java"/>
            <include name="CheckedHelloNewPanelAutomationHelper.java"/>
            <include name="FinishNewConsolePanel.java"/>
            <include name="FinishNewPanel.java"/>
            <include name="FinishNewPanelAutomationHelper.java"/>
            <include name="FinishNewPanelValidator.java"/>
            <include name="HexaPassphraseProcessor.java"/>
            <include name="HostnameValidator.java"/>
            <include name="InstallTypeNewPanel.java"/>
            <include name="InstallTypeNewPanelAutomationHelper.java"/>
            <include name="InstallTypeConsolePanel.java"/>
            <include name="InstallTypePanel.java"/>
            <include name="InstallTypePanelAutomationHelper.java"/>
            <include name="InstallationTypePanelAutomationHelper.java"/>
            <include name="InstallationInformationHelper.java"/>
            <include name="NodeIdentifierValidator.java"/>
            <include name="NodeIdentifierDataValidator.java"/>
            <include name="OsVersionHelper.java"/>			
            <include name="PacksNewPanelAutomationHelper.java"/>
            <include name="PacksNewPanelValidator.java"/>
            <include name="PacksNewPanel.java"/>
            <include name="PanelAutomationHelper.java"/>
            <include name="RegistryHandlerX3.java"/>
            <include name="RegistryInstallerNewListener.java"/>
            <include name="StringUtil.java"/>
            <include name="TargetNewConsolePanel.java"/>
            <include name="TargetNewPanel.java"/>
            <include name="TargetNewPanelAutomationHelper.java"/>
            <include name="TargetNewPanelValidator.java"/>
            <include name="UpdateListener.java"/>
            <include name="MoreAdvApi32.java"/>
            <include name="UpdatePassphraseValidator.java"/>
            <include name="X3RuntimeValidator.java"/>
            <include name="X3WebServerValidatorProcessor.java"/>
            <include name="XMLHelper.java"/>
            <include name="PrintMessage.java"/>
            <include name="eng.xml"/>
            <include name="fra.xml"/>
            <include name="messages_en.properties"/>
            <include name="messages_fr.properties"/>

            <include name="Pack.java"/>
            <include name="OsConstraint.java"/>

        </build-installer-listener>
    </target>

    <!-- ====================================================================== -->

    <!-- Performs some cleanups -->
    <target name="clean" description="cleans up the dist">
        <echo message="Cleaning-up"/>
        <delete includeEmptyDirs="true" quiet="true">
            <!-- <fileset dir="${build.dir}"/>
            <fileset dir="${dist.dir}"/> -->
            <fileset dir="${basedir}/izPackCustomActions/bin">
                <include name="**/*"/>
            </fileset>
            <fileset dir="${basedir}/lib/">
                <include name="com.sage.izpack.jar"/>
            </fileset>
        </delete>
        <!-- <delete file="bin/native/3rdparty/COIOSHelper.dll"/> -->
        <delete dir="${basedir}/bin/native/izpack"/>
        <!-- <delete dir="${basedir}/src/doc-reST/html"/>
        <delete dir="${basedir}/src/doc-reST/pdf"/> -->
        <delete includeEmptyDirs="true" dir="${basedir}/doc/izpack"/>
        <!-- <delete dir="${basedir}/_src${dist.subdir}"/> -->
    </target>

    <!-- Builds all compilation targets -->
    <target name="all" depends="clean, splashscreen, build.com.sage.izpack" description="base: compiles a developer version"/>

    <!-- Builds the Javadoc -->
    <target name="build.javadoc" depends="prepare" description="Builds the javadoc">
        <mkdir dir="${build.dir}/javadoc"/>
        <javadoc destdir="${build.dir}/javadoc" access="private" classpathref="classpath">
            <packageset dir="${src.dir}">
                <exclude name="**/CVS"/>
            </packageset>
        </javadoc>
        <copy todir="${doc.dir}/izpack/javadoc" preservelastmodified="true">
            <fileset dir="${build.dir}/javadoc">
                <include name="**/*"/>
            </fileset>
        </copy>
    </target>

    <target name="build.docu" description="Builds the customer documentation">
        <exec executable="${basedir}/src/doc-reST/build.py" dir="${basedir}/src/doc-reST">
            <arg value="build.py"/>
        </exec>

        <mkdir dir="${doc.dir}/izpack/html"/>
        <copy todir="${doc.dir}/izpack/html" preservelastmodified="true">
            <fileset dir="${basedir}/src/doc-reST/html">
                <include name="**/*"/>
            </fileset>
        </copy>
        <mkdir dir="${doc.dir}/izpack/pdf"/>
        <copy todir="${doc.dir}/izpack/pdf" preservelastmodified="true">
            <fileset dir="${basedir}/src/doc-reST/pdf">
                <include name="manual.pdf"/>
            </fileset>
        </copy>

        <delete file="${basedir}/src/texput.log"/>
        <delete dir="${basedir}/src/doc-reST/html"/>
        <delete dir="${basedir}/src/doc-reST/pdf"/>
    </target>

    <target name="create.docu" depends="build.javadoc, build.docu" description="Creates the javadoc-api and customer documentation">

    </target>





    <!-- - - - - - - - - - - - - - - - - -
          target: copy.distfiles
         - - - - - - - - - - - - - - - - - -->
    <target name="copy.dist.files">
        <echo message="Copies the general files to the dist directory"/>
        <copy todir="${dist.dir}" includeEmptyDirs="yes" preservelastmodified="true">
            <fileset dir="${basedir}">
                <include name="bin/**"/>
                <include name="utils/**"/>
                <include name="lib/*.jar"/>
                <include name="doc/**"/>
                <include name="legal/**"/>
                <include name="src/**"/>
                <include name="sample/**"/>
                <include name="*.txt"/>
                <include name="*.html"/>
            </fileset>
        </copy>
        <echo message="Copies the license images and specs to the dist directory"/>
        <copy todir="${dist.dir}" includeEmptyDirs="yes" preservelastmodified="true">
            <fileset dir="${dist-files.dir}">
                <include name="useNativeLAF"/>
                <include name="*.jpg"/>
                <include name="*.png"/>
                <include name="*.html"/>
                <include name="Licence.txt"/>
                <include name="IzPack-install*.xml"/>
                <include name="shortcutSpec.xml"/>
                <include name="Unix_shortcutSpec.xml"/>
                <include name="RegistrySpec.xml"/>
                <include name="conditions.xml"/>
            </fileset>
        </copy>
        <echo message="Copies the bin files to the dist directory"/>
        <copy todir="${dist.dir}/bin" includeEmptyDirs="yes" overwrite="yes" preservelastmodified="true">
            <fileset dir="${dist-files.dir}">
                <include name="compile*"/>
                <include name="lcp.bat"/>
                <include name="start.sh"/>
            </fileset>
        </copy>
    </target>



    <!-- Creates an installer for IzPack -->
    <target name="exec.izpack.compiler">

        <!-- We call IzPack -->
        <echo message="Makes the installer using IzPack" level="verbose"/>
        <izpack input="${dist.dir}/${installer.xmlfile}" output="${dist.dir}/${installer.name}${ver}.${rel}.jar" installerType="standard" basedir="${dist.dir}" izPackDir="${dist.dir}/" compression="deflate" compressionlevel="9"/>
        <echo>
            sucessfully created:
            ${dist.dir}/${installer.name}${ver}.${rel}.jar
        </echo>
    </target>




    <!--
        Fixes CR/LF by applying the Unix convention (\n for endlines).
        It also fixes the encoding problems by moving it to UTF-8.
    -->
    <target name="fix.crlf">
        <property name="dist.src.dir" location="${dist.dir}/src"/>
        <property name="dist.lib.dir" location="${dist.dir}/bin"/>
        <echo>
            Fixing linefeeds for several files in:
            "${dist.src.dir}"
            and
            "${dist.lib.dir}"
        </echo>
        <fixcrlf srcDir="${dist.src.dir}" eol="lf" eof="remove" encoding="UTF-8">
            <include name="**/*.java"/>
            <include name="**/*.xml"/>
            <include name="**/*.properties"/>
        </fixcrlf>
        <fixcrlf srcdir="${dist.dir}" eol="unix" eof="remove">
            <include name="**/*.sh"/>
            <include name="dist-files/compile"/>
        </fixcrlf>
        <fixcrlf srcdir="${dist.lib.dir}" eol="unix" eof="remove">
            <include name="**/*.sh"/>
            <include name="compile"/>
        </fixcrlf>
        <fixcrlf srcdir="${dist.dir}" eol="dos" eof="add">
            <include name="**/*.bat"/>
        </fixcrlf>
        <fixcrlf srcdir="${dist.lib.dir}" eol="dos" eof="add">
            <include name="**/*.bat"/>
        </fixcrlf>
    </target>

    <!-- Runs a testing installer. -->
    <target name="run.installer">
        <java jar="${basedir}/_dist/IzPack-install-${build.number}.jar" fork="true"/>
    </target>

    <!-- Makes everything, from compilation to generating an installer. -->
    <target name="quickdist" depends="all" description="makes a installer without docu"/>

    <!-- Makes everything, from compilation, customer and javadoc to generating an installer. -->
    <target name="dist" depends="src.tar.gz, all, create.docu" description="makes a complete installer"/>

    <!-- Makes everything, from Cleaning to generating both installers: normal and reg support. -->
    <target name="cleandistreg" depends="clean, splashscreen, dist" description="creates a full dist with Win32 uninstall registry support"/>

    <!-- =================================
          target: clean.src.tar.gz
         ================================= -->
    <target name="clean.src.tar.gz" depends="clean, src.tar.gz" description="--> creates a src.tar.gz after clean up">
    </target>


    <!-- =================================
          target: src.tar.gz
         ================================= -->
    <target name="src.tar.gz" description="--> creates a src.tar.gz ">
        <mkdir dir="${basedir}/_src${dist.subdir}"/>
        <property name="src.tar.gz" value="${basedir}/_src${dist.subdir}/${product}-src-${ver}.${rel}.tar.gz"/>
        <tar compression="gzip" destfile="${src.tar.gz}" basedir="${basedir}" excludes="_src${dist.subdir}/**, _dist/**, _build/**, bin/panels/**, bin/customActions/**, doc/izpack/**, eclipse-bin/**, lib/com.sage.izpack.jar, lib/uninstaller*, lib/installer.jar"/>
    </target>


    <!-- convenient :) makes a quick dist (w/o docu), an installer and run them. -->
    <target name="quickdist+run" depends="quickdist, run.installer" description="makes a quickdist installer and runs them"/>

    <!-- convenient :) makes a complete dist an installer and run them. -->
    <target name="dist+run" depends="dist, run.installer" description="makes a complete installer and runs them"/>

    <!-- ** splashscreen **
	  shows some ANT specific- and JAVA-
	  but Platform and Project-independed Properties. ================================================================ -->
    <target name="splashscreen" depends="time" description="shows the used environment and project settings">

        <property name="console_line" value="**************************************************"/>
        <echo message="${console_line}"/>
        <echo message="* ${ant.version}"/>
        <echo message="*   Java JRE version ${ant.java.version} ${java.vm.vendor}"/>
        <exec executable="${java.home}/bin/java">
            <arg line="-version"/>
        </exec>
        <echo message="${console_line}"/>
        <echo message="*  processing file ....... '${ant.file}'"/>
        <echo message="*  in base-directory ..... '${basedir}'"/>
        <echo message="*  building project ...... '${ant.project.name}'"/>
        <echo message="*  working in directory .. '${cwd}'"/>
        <echo message="${console_line}"/>
    </target>



    <!-- =================================
         target: time - takes a timestamp
        ================================= -->
    <target name="time">
        <tstamp/>
    </target>


    <!-- =================================
          target: dump.properties - dumps the curent properties into the $os_$timestamp.properties file
         ================================= -->
    <target name="dump.properties" depends="time" description="dump.environment (for debug)">
        <echoproperties destfile="${basedir}/ant_properties_at_${os.name}-${os.arch}-${os.version}_at_${DSTAMP}-${TSTAMP}.txt"/>
    </target>


</project>
